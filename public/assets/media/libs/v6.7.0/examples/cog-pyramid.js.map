{"version":3,"file":"cog-pyramid.js","mappings":"2KAWMA,EAAW,IAAI,IAAS,CAC5BC,OAAQ,EAAE,IAAK,IACfC,YAAa,CAAC,QAAU,SAAW,UAAY,WAAc,aAC7DC,UAAW,CACT,CAAC,IAAK,KACN,CAAC,KAAM,KACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,SAILC,EAAU,IAAI,IACdC,EAAc,GACdC,EAAKN,EAASO,iBAAiBC,OAErC,SAASC,EAASC,EAAGC,EAAGC,GACtBC,IAAMC,EAAM,yDAAyDJ,EAAC,IAAIE,EAAC,IAAID,EAAC,OAC1EG,KAAOT,IACXD,EAAQW,YAAYC,KAClB,IAAI,IAAe,CACjBC,QAASP,EACTQ,QAAe,IAANR,GAAWA,IAAMJ,EAAK,OAAIa,EAAYT,EAAI,EACnDU,OAAQpB,EAASqB,mBAAmB,CAACX,EAAGC,EAAGC,IAC3CU,OAAQ,IAAI,IAAQ,CAClBC,QAAS,CACP,CACET,IAAKA,SAMfT,EAAYS,IAAO,GAIvBD,IAAMW,EAAM,IAAI,IAAI,CAClBC,OAAQ,MACRC,OAAQ,CAACtB,GACTuB,KAAM,IAAI,KAAK,CACbC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,gBAAgB,MAKpBtB,EAAS,EAAG,EAAG,GAGfe,EAAIQ,GAAG,WAAW,WAChBnB,IAAMc,EAAOH,EAAIS,UACjBjC,EAASkC,kBACP,QAAgB,EAAE,KAAM,GAAI,IAAK,IAAKP,EAAKQ,mBAC3CnC,EAASoC,kBAAkBT,EAAKU,kBAChC,SAAC,G,OAAc5B,E","sources":["webpack:///./cog-pyramid.js"],"sourcesContent":["import GeoTIFF from '../src/ol/source/GeoTIFF.js';\nimport LayerGroup from '../src/ol/layer/Group.js';\nimport Map from '../src/ol/Map.js';\nimport TileGrid from '../src/ol/tilegrid/TileGrid.js';\nimport View from '../src/ol/View.js';\nimport WebGLTileLayer from '../src/ol/layer/WebGLTile.js';\nimport {getIntersection} from '../src/ol/extent.js';\n\n// Metadata from https://s2downloads.eox.at/demo/EOxCloudless/2019/rgb/2019_EOxCloudless_rgb.json\n\n// Tile grid of the GeoTIFF pyramid layout\nconst tileGrid = new TileGrid({\n  origin: [-180, 90],\n  resolutions: [0.703125, 0.3515625, 0.17578125, 8.7890625e-2, 4.39453125e-2],\n  tileSizes: [\n    [512, 256],\n    [1024, 512],\n    [2048, 1024],\n    [4096, 2048],\n    [4096, 4096],\n  ],\n});\n\nconst pyramid = new LayerGroup();\nconst layerForUrl = {};\nconst zs = tileGrid.getResolutions().length;\n\nfunction useLayer(z, x, y) {\n  const url = `https://s2downloads.eox.at/demo/EOxCloudless/2019/rgb/${z}/${y}/${x}.tif`;\n  if (!(url in layerForUrl)) {\n    pyramid.getLayers().push(\n      new WebGLTileLayer({\n        minZoom: z,\n        maxZoom: z === 0 || z === zs - 1 ? undefined : z + 1,\n        extent: tileGrid.getTileCoordExtent([z, x, y]),\n        source: new GeoTIFF({\n          sources: [\n            {\n              url: url,\n            },\n          ],\n        }),\n      })\n    );\n    layerForUrl[url] = true;\n  }\n}\n\nconst map = new Map({\n  target: 'map',\n  layers: [pyramid],\n  view: new View({\n    projection: 'EPSG:4326',\n    center: [0, 0],\n    zoom: 0,\n    showFullExtent: true,\n  }),\n});\n\n// Add overview layer\nuseLayer(0, 0, 0);\n\n// Add layer for specific extent on demand\nmap.on('moveend', () => {\n  const view = map.getView();\n  tileGrid.forEachTileCoord(\n    getIntersection([-180, -90, 180, 90], view.calculateExtent()),\n    tileGrid.getZForResolution(view.getResolution()),\n    ([z, x, y]) => useLayer(z, x, y)\n  );\n});\n"],"names":["tileGrid","origin","resolutions","tileSizes","pyramid","layerForUrl","zs","getResolutions","length","useLayer","z","x","y","const","url","getLayers","push","minZoom","maxZoom","undefined","extent","getTileCoordExtent","source","sources","map","target","layers","view","projection","center","zoom","showFullExtent","on","getView","forEachTileCoord","calculateExtent","getZForResolution","getResolution"],"sourceRoot":""}